#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Part
Research
\end_layout

\begin_layout Standard
A short examination of the underlying motion capture technology, games,
 and using them as an educational tool.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cleardoublepage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Motion Capture Technology
\end_layout

\begin_layout Standard
Since our project entails using motion capture as the primary input method,
 this section will give a general background about the subject, as well
 as more in depth information about the Microsoft Kinect sensor that we
 use in our prototype.
 Motion capture, or motion tracking, is defined as the process of recording
 the movement of people or objects.
 The most known usage of this is the entertainment industry, where an actor's
 movements are transferred to a digitally animated avatar.
 It also has applications for the military, in sports, and even in the medical
 fields.
 In these fields the resulting data and animations are used for more in-depth
 analysis of movement than what is realistically possible to do in real
 time.
 Most equipment used for motion capture is based on optical systems, where
 cameras detect markers placed on the persons or objects being tracked.
 These markers are either passive or active, with active markers sending
 out light on their own, while passive markers are either brightly colored
 or reflecting signals from the camera device.
 With the development of more advanced computer vision techniques we also
 have markerless optical tracking, such as the Microsoft Kinect, which comprises
 a normal color camera, and infrared depth tracking.
 The markerless versions are more aimed at the consumer market so far, with
 the tracking being less precise than the marker based systems, but also
 at a fraction of the cost.
\end_layout

\begin_layout Subsection
Microsoft Kinect
\begin_inset CommandInset label
LatexCommand label
name "sub:Microsoft-Kinect"

\end_inset


\end_layout

\begin_layout Standard
The Kinect, shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Microsoft-Kinect-v2"

\end_inset

 is Microsoft’s version of motion tracking for the home consoles, an answer
 to Nintendo's Wii Remote, and Sony's PlayStation Move/Camera.
 Initially sold for the Xbox 360, there are now versions for the Xbox One
 as well as PC.
 Microsoft have also released a software development kit that allows developers
 to write applications that utilize the Kinect.
 The initial version for the Xbox 360 was fairly well received, but not
 a huge success much due to the fact that the cost was about three quarters
 of an actual Xbox, as well as somewhat intimidating space requirements.
 The second version, which came as an integrated part of the Xbox One, gathered
 a somewhat colder reception.
 This was much due to the fact that people assumed this was a large cost
 increase compared to a version of the Xbox without the kinect, as well
 as some privacy concerns since it was said that the kinect would always
 be “on” to listen for commands to start the Xbox via voice activation.
 It is a very capable piece of hardware, despite its low cost, and have
 been used for many research projects related to computer vision and motion
 capture.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/Kinect.jpg
	lyxscale 10
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Microsoft Kinect v2 Sensor
\begin_inset CommandInset label
LatexCommand label
name "fig:Microsoft-Kinect-v2"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Hardware Comparison
\end_layout

\begin_layout Standard
On the hardware side the two Kinect versions are similar, they both have
 a color camera similar to a webcam, an infrared camera that functions as
 a depth sensor, and a microphone array that captures positional audio.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Kinect-Hardware-Specification"

\end_inset

 shows the different specifications of the kinect versions, both versions
 of the Kinect have an effective distance of depth tracking at approximately
 0.5 to 4.5 meters.
 The v1 has a smaller field of view than the v2, but compensates with a
 tilt motor that can adjust the focus of the sensors.
 The largest difference between the two is the jump from USB 2.0 to USB 3.0
 allowing a lot more data to be transferred, this made it possible to equip
 the v2 with a 1080p resolution camera while keeping the framerate at 30.
 Additionally the increased data rate has increased the number of fully
 trackable skeletons to 6 up from 2 on the v1, as well as 26 instead of
 20 joints per skeleton.
 The v2 can also display a video stream from the infrared camera, which
 the v1 is unable to.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Kinect v1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Kinect v2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Color Camera
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
640x480 @30 fps
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1920x1080 @30 fps
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Depth Camera
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
320x240
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
512x424
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Infrared Camera
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
512x424
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Max Depth Distance
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
~4.5 m
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
~4.5 m
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Min Depth Distance
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40 cm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50 cm
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Horizontal Field of View
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
57 degrees
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
70 degrees
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Vertical Field of View
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43 degrees
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
60 degrees
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Tilt Motor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Skeleton Joints Defined
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20 joints
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Full Skeletons Tracked
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
USB Standard
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Kinect Hardware Specification Comparison
\begin_inset CommandInset label
LatexCommand label
name "tab:Kinect-Hardware-Specification"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Software
\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Kinect-SDK-Comparison"

\end_inset

 compares the different available development kits with support for the
 Kinect.
 The easiest to use and most comprehensive SDK for the Kinect is the official
 kit from Microsoft themselves.
 This SDK includes everything needed to start creating applications for
 the Kinect written in any .NET compatible language, such as C#, Visual Basic,
 or C++.
 The SDK includes several examples and test applications that can be used
 to troubleshoot the Kinect itself or help in development of new applications.
 The main drawback of the official SDK is that it is proprietary, and no
 way to look at the actual source code for the drivers, it also only functions
 on Windows.
 To use the Kinect on other operating system it requires the use of third
 party drivers.
 The most popular third party driver for the Kinect is libfreenect from
 the OpenKinect group, they provide drivers for both the v1 and v2.
 Using such drivers however, does not provide the full functionality of
 the SDK, requiring pairing with other libraries or frameworks for computer
 vision to provide skeleton tracking and similar features that are built
 into Microsoft’s SDK.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Kinect SDK 1.8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Kinect SDK 2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
OpenKinect
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Author
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Microsoft
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Microsoft
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Third-party
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Kinect v1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supported
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not supported
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supported
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Kinect v2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Not supported
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supported
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Supported
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
License
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Proprietary
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Proprietary
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Apache v2 &
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GPL v2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Language
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.NET compatible,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.NET compatible,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C/C++, C#,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Visual C++
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Visual C++
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Python, Ruby,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Actionscript, Java
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
OS
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Windows
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Windows
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Windows, OS X,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linux
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Kinect SDK Comparison
\begin_inset CommandInset label
LatexCommand label
name "tab:Kinect-SDK-Comparison"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Additionally there is a framework called OpenNI (Open Natural Interaction)
 
\begin_inset CommandInset citation
LatexCommand cite
key "OpenNI"

\end_inset

 which has been developed to act as an abstraction layer between multiple
 supported hardware devices, including the Kinect.
 It has not been included in the comparison because it is believed to not
 be very relevant anymore.
 The original OpenNI project was acquired by Apple and shut down in November
 2013, since then a new open-source project called OpenNI 2 has surfaced,
 but any concrete information on the capabilities and features of said project
 is hard to come by.
\end_layout

\begin_layout Subsection
Summary
\end_layout

\begin_layout Standard
Since we have a Kinect v2 Sensor for use with our experiments, we want our
 prototype to build upon its strong features, mainly the advanced skeleton
 tracking that handles up to six people at once together with the large
 tracking area.
 This is very well suited for a multiplayer game, especially in a classroom
 setting, considering that the only real downside to tracking this many
 people at once is the requirement for a large room.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Game Development Technology
\end_layout

\begin_layout Standard
This section is devoted to finding possible candidates for frameworks or
 engines that meets our requirements.
 For a simple mock prototype we do not require a high level of functionality
 of features, however the bare essentials should be covered, which is:
\end_layout

\begin_layout Itemize
An implementation of the Game Loop.
\end_layout

\begin_layout Itemize
Handling of Graphics.
\end_layout

\begin_layout Itemize
Handling of Audio.
 
\end_layout

\begin_layout Standard
Additionally the framework or engine should be compatible with the Kinect
 SDK.
\end_layout

\begin_layout Standard
This section will start with explaining what we mean by the game loop, before
 we review possible candidates for engine/framework for our prototype.
\end_layout

\begin_layout Subsection
The Game Loop
\begin_inset CommandInset label
LatexCommand label
name "sub:The-Game-Loop"

\end_inset


\end_layout

\begin_layout Standard
Most computer/video games are made using some variant of the Game Loop 
\begin_inset CommandInset citation
LatexCommand cite
key "GameLoop"

\end_inset

, which is represented in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Game-Loop"

\end_inset

.
 The Game Loop is responsible for handling the game initialization, update
 and draw mechanics, where update and draw usually runs once for every frame
 rendered in an endless loop until termination of the game has been requested.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/GameLoop.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The Game Loop
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Game-Loop"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Initialize and Load
\end_layout

\begin_layout Standard
The “Initialize and Load” step is where data, graphics, audio, etc.
 is instantiated and loaded, it is usually executed only once after the
 game is started and before the “Update” and “Draw” for the first frame
 is invoked.
 If the software supports it, graphics may be loaded onto the GPU.
\end_layout

\begin_layout Subsubsection
Update
\end_layout

\begin_layout Standard
The “Update” step is invoked before “Draw” of any frame in the game.
 This is where data is updated and prepared in the event of any changes
 so that it is ready to be rendered, one example of change being the result
 of I/O input like mouse and keyboard.
\end_layout

\begin_layout Subsubsection
Draw
\end_layout

\begin_layout Standard
The “Draw” step is invoked after “Update” of any frame in the game.
 This is where the actual rendering takes place.
\end_layout

\begin_layout Subsubsection
Unload
\end_layout

\begin_layout Standard
The “Unload” step is where all game data is unloaded before the game shuts
 down.
\end_layout

\begin_layout Subsection
Engines and Frameworks
\begin_inset CommandInset label
LatexCommand label
name "sub:Engines-and-Frameworks"

\end_inset


\end_layout

\begin_layout Standard
One of the first question we would like to answer is “What game engine or
 framework should we choose for developing a game?”.
 The list of candidates are seemingly endless, to narrow it down we will
 only look at popular choices in relation with the C# programming language,
 as C# is the most relevant when developing with the Kinect in mind.
 C/C++ is also a relevant alternative, however the project members does
 not have much experience with C/C++, whereas they are quite familiar with
 C#.
\end_layout

\begin_layout Standard
The second question is “What do we need? An engine or a framework?”.
 Keeping in mind that a framework is usually built to solve a specific issue,
 while an engine may be densely packed with features that go beyond the
 scope of what we are trying to accomplish.
\end_layout

\begin_layout Standard
The differences between a game framework and an engine is not clearly defined,
 however it is generally understood that a framework is a set of libraries
 packed together to solve a specific issue, while a game engine is a set
 of frameworks bundled together, usually with an editor.
 An engine comes with many tools and eases the burdens of programming on
 the developer, which makes development much more accessible to those who
 does not strictly come from a programming background.
 However a game built on frameworks instead of an engine will usually be
 more modifiable and easier to upgrade to newer technology as it does not
 have to follow the rigid “recipe” set from an engine and its editor.
 For C#, Unity is the most popular game engine, and Microsoft XNA is the
 most popular framework.
 All engines and frameworks listed in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Unity"

\end_inset

-
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:CocosSharp"

\end_inset

 uses some variant of the “Game Loop”, which is described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:The-Game-Loop"

\end_inset

 The Game Loop.
\end_layout

\begin_layout Subsubsection
Unity
\begin_inset CommandInset label
LatexCommand label
name "sub:Unity"

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/UnityLogo.png
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Unity
\begin_inset CommandInset label
LatexCommand label
name "fig:Unity"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Unity 
\begin_inset CommandInset citation
LatexCommand cite
key "Unity"

\end_inset

, Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Unity"

\end_inset

, is a commercial game engine which is widely used, and is one of the most
 popular engines currently on the market.
 The latest edition supports scripting in the languages C# and JavaScript.
 Two of the major reasons it has become so established amongst game developers
 is that it is easy to use, and have wide platform support, spanning from
 PC, Consoles, Mobile and even platforms that are not common like Smart
 TV’s.
 It has been used to make games such as Ori and the Blind Forest, Endless
 Legend, Dungeon of the Endless, Satellite Reign, HearthStone, Cities Skylines,
 and many more.
 It uses a custom made edition of Mono to achieve support for all the platforms.
 This custom edition is based off of the rules and conventions of .NET 2.0,
 with some added modifications that allows developer to script with certain
 .NET 3.5 features on code files within the Unity environment.
 This however, means that it is incompatible with the official Kinect SDK
 which requires .NET 4.0 at minimum.
 To circumvent this issue Microsoft has made a custom Unity add-on that
 allows developers to use the Kinect in Unity.
\end_layout

\begin_layout Subsubsection
Xenko
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/XenkoLogoTM.png
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Xenko
\begin_inset CommandInset label
LatexCommand label
name "fig:Xenko"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Xenko 
\begin_inset CommandInset citation
LatexCommand cite
key "Xenko"

\end_inset

, Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Xenko"

\end_inset

, is a open-source game engine for development of games in a C# environment,
 meaning that it provides its own editor, however it generates a C# project
 following the standards established by Microsoft, meaning the Xenko editor
 is optional for those who prefer using an IDE instead.
 It supports Windows, Android, iOS and Windows Phone, there is also some
 functional experimental support for Linux, OS X and Consoles.
 Xenko is fairly new, so unfortunately there are not many examples of games
 made with it, however it is fully compatible with the official Kinect SDK.
\end_layout

\begin_layout Subsubsection
Microsoft XNA
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/MicrosoftXNALogo.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
XNA
\begin_inset CommandInset label
LatexCommand label
name "fig:XNA"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
XNA 
\begin_inset CommandInset citation
LatexCommand cite
key "XNA"

\end_inset

, Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:XNA"

\end_inset

, is arguably the best known framework for game development in the C# programmin
g language.
 Developed by Microsoft it supports platforms such as Windows, Xbox 360
 and Windows Phone.
 It has been used in development of titles such as Bastion, Apatheon, Rogue
 Legacy, Fez, Stardew Valley and more.
 It is also fully compatible with the official Kinect SDK.
 Unfortunately it has been discontinued by Microsoft which makes it an unideal
 candidate for development with reusability in mind.
\end_layout

\begin_layout Subsubsection
MonoGame
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/MonoGameLogo.png
	scale 5

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
MonoGame
\begin_inset CommandInset label
LatexCommand label
name "fig:MonoGame"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
MonoGame 
\begin_inset CommandInset citation
LatexCommand cite
key "MonoGame"

\end_inset

, Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:MonoGame"

\end_inset

, is an open source game development framework maintained by MonoProject
 (known for Mono, MonoDevelop, etc.), as a derivative of XNA.
 Originally started out as a wrapper library to port games developed in
 the XNA framework to other platforms, it eventually evolved into a stand-alone
 framework.
 Of all the frameworks for C# game development, MonoGame currently has the
 biggest community and highest development rate.
 It supports platforms such as Windows, Linux, OS X, iOS, Android, Xbox
 One, PS4.
 Bastion, Fez and Stardew Valley are examples of games that started development
 in XNA, but has been ported to other platforms using MonoGame.
 Since MonoGame is just a framework that can be implemented into a standard
 C# project it is fully compatible with the official Kinect SDK.
\end_layout

\begin_layout Subsubsection
FNA
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/FNA.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
FNA
\begin_inset CommandInset label
LatexCommand label
name "fig:FNA"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
FNA 
\begin_inset CommandInset citation
LatexCommand cite
key "FNA"

\end_inset

, Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:FNA"

\end_inset

, is an open source game development framework made and maintained by Ethan
 Lee, and just like MonoGame it is also a derivative of XNA.
 It is a fairly young and immature project so information about it is sparse.
 It supports PC platforms exclusively, namely Windows, Linux and OS X, and
 just like MonoGame it is fully compatible with the official Kinect SDK
 for the same reasons.
\end_layout

\begin_layout Subsubsection
CocosSharp
\begin_inset CommandInset label
LatexCommand label
name "sub:CocosSharp"

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/CocosLogo.png
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
CocosSharp
\begin_inset CommandInset label
LatexCommand label
name "fig:CocosSharp"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
CocosSharp 
\begin_inset CommandInset citation
LatexCommand cite
key "CocosSharp"

\end_inset

, Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CocosSharp"

\end_inset

, is an open source game development framework maintained by Xamarin(known
 for the Xamarin Platform, Xamarin Forms, Xamarin Studio, etc.).
 It is built on top of MonoGame with C# implementations of the API of the
 already well established open source game development frameworks of Cocos2D
 and Cocos3D.
 Like FNA it is a relatively young project so there is not much concrete
 information on the framework.
 Since it is built on top of MonoGame it can run any platform that MonoGame
 supports, and for the same reason it is also compatible with the official
 Kinect SDK.
\end_layout

\begin_layout Subsection
Summary
\end_layout

\begin_layout Standard
It is evident that there is no lack of alternatives when it comes to doing
 game development in C# for the Kinect, all the candidates we have found
 are solid and feature complete.
 Some however, like Xenko, FNA, and CocosSharp have the disadvantage of
 being introduced relatively recently to the market, which makes it hard
 to favor them in the interest of building a prototype that can be reused,
 modified, or expanded upon for later research projects, as any of these
 projects may or may not be relevant in the future.
 Since XNA is discontinued it is clearly not a candidate, but it was important
 to mention either way because it has been so important for C# game development,
 and many of the potential candidates are derivatives of XNA.
 Unity is usually the crowd favorite for game development in C#, however
 the lack of support for the official Kinect SDK is worrying.
\end_layout

\begin_layout Standard
Xenko or MonoGame seem to be the best and safest choices in the interest
 of building reusable software.
 Xenko is still a fairly new engine, and the project team does not have
 much experience with it, but it appears to be quite capable.
 MonoGame is probably the strongest contender because of its popularity
 and devoted developers.
\end_layout

\begin_layout Standard
Conclusively it also is worth noting that choosing any XNA or any derivative
 will provide the benefit of easy portability, since they are all designed
 to be easy to convert from one to another.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Serious Games
\end_layout

\begin_layout Standard
As we are developing an educational game, which is a subcategory of Serious
 Games, this section will give a definition for this term, and present some
 general history and examples.
 There is no formal definition for serious games, but most attempts converge
 towards “A game that has a purpose other than entertainment”.
 The term serious game predates computer games, but the principles remain
 the same, and computer technology have greatly increased the possibilities.
 
\end_layout

\begin_layout Quote
“Reduced to its formal essence, a game is an activity among two or more
 independent decision-makers seeking to achieve their objectives in some
 limiting context.
 A more conventional definition would say that a game is a context with
 rules among adversaries trying to win objectives.
 We are concerned with serious games in the sense that these games have
 an explicit and carefully thought-out educational purpose and are not intended
 to be played primarily for amusement.” Serious Games, Clark Abt, 1970
\end_layout

\begin_layout Standard
Most serious games are meant to be entertaining as this is the main motivation
 behind calling them games in the first place.
 These games are supposed to assist in education, training, or other purposes
 such as marketing.
 In the marketing case the games are in a large degree just normal games
 with an elevated degree of product placement, while games that focus on
 education and training often see substantial differences when compared
 to regular games only meant for the purpose of entertaining.
 While a lot of the serious games developed over the years have been focused
 on regular education such as language and math, these have not proven very
 successful.
 The most successful versions of serious games are those focused around
 situations and skills that are difficult to exercise due to being either
 too dangerous, time consuming, or expensive.
\end_layout

\begin_layout Subsection
Common Types of Serious Games
\end_layout

\begin_layout Standard
This chapter will present some of the most popular types of serious games,
 and try to explain the reasoning behind why they are created and used.
\end_layout

\begin_layout Subsubsection
Edutainment
\end_layout

\begin_layout Standard
As the name suggests, edutainment is a term used for entertainment that
 is designed to also educate.
 Most of these focus primarily on the entertainment part, with the educative
 components are a small part of the whole.
 But there are cases which are almost purely educational with little to
 no focus on the entertainment value.
 Video games intended for edutainment started out in the 1980’s when computers
 began being available for classroom use, and games including Oregon Trail
 and the Munchers series gained popularity.
 With computers becoming more common over the 1990’s, the number of edutainment
 games exploded.
 However, the interest for these games did not last, as most of them were
 generally bad.
 
\end_layout

\begin_layout Quote
“Most existing edutainment products combine the entertainment value of a
 bad lecture with the educational value of a bad game” Squire & Jenkins,
 2003, p.8
\end_layout

\begin_layout Standard
Much of the reason for the failing of these games was that they usually
 were just a variation on drilling exercises, repeating the same task over
 and over.
 Games that went in a different direction, by promoting creative thinking
 and unusual problems became popular, one such game was The Incredible Machine
 or TIM.
 This type of game have not found their way into classrooms in the same
 degree as the ones from the early 80’, much due to the fact that they do
 not fit any particular curriculum.
 Judging by the trends over the years, it is most likely that in the future
 we will not have games dedicated to teaching specifics subjects in the
 degree that we have seen.
 Instead we will probably have more game technology complimenting the traditiona
l teaching, such as the general-purpose quiz game Kahoot! as shown in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Kahoot!"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/Kahoot.png
	scale 33

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Kahoot!
\begin_inset CommandInset label
LatexCommand label
name "fig:Kahoot!"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Games for Health
\end_layout

\begin_layout Standard
Health focused serious game is one of the fastest growing sub genres, with
 a wide range of applications.
 Many of these games utilize the motivational factor of games to lessen
 the burden of more monotonous tasks for instance in physical therapy.
 In some cases the act of gaming itself has proven beneficial in terms of
 health, many stroke patients have shown increased recovery rate from the
 fine hand-eye coordination required in many games.
 There have also been shown a correlation between gaming experience and
 performance in laparoscopic surgery.
 We also have games like wii fit, that physically tracks the player and
 help guide workouts, and similar games for rehabilitation.
 Games have even been used to treat post traumatic stress disorder for war
 veterans 
\begin_inset CommandInset citation
LatexCommand cite
key "VirtualIraq"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Simulation
\end_layout

\begin_layout Standard
Simulation games is a genre by itself, but combined with the serious games
 term we have a smaller subset consisting of more realistic simulators.
 This is a broad category including management, life, sports, medical, military,
 vehicular, social, and more.
 While most of these are very much games, such as SimCity, there are cases
 that are more or less equal to their real life counterpart, like very advanced
 driving simulators with specialized input devices.
 Simulators have gotten a lot of attention over the years and inspired many
 impressive setups, not only by professional companies, but also enthusiasts
 building entire plane cockpits in their garage.
 One of the largest actors, not only in the simulation business, but also
 in the serious games business as a whole, is the US military.
 They have been responsible for creating many different simulations of all
 kinds of situations, meeting different cultures, war scenarios, vehicular
 training, environment adaption, and more.
 In addition to this they have also commissioned two games, America’s Army
 (2002) and Full Spectrum Warrior (2004) intended for the general public
 to aid with recruitment and spreading knowledge about the military.
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Subsubsection
The Oregon Trail
\end_layout

\begin_layout Standard
The Oregon Trail, Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Oregon-Trail"

\end_inset

, is an “edutainment” title made in the 70’s for the purpose of teaching
 students about american history, more specifically the 19th century life
 of the pioneers travelling from Independence to Oregon.
 Originally the game started out in the classroom as a concept of combining
 learning with an extra element of fun to grab the attention of the students.
 The players found it entertaining and it became popular and successful,
 to the level where people worldwide still talk about it 30-40 years later.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/OregonTrail.jpg
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The Oregon Trail
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Oregon-Trail"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Incredible Machine(TIM)
\end_layout

\begin_layout Standard
The Incredible Machine(TIM), Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Incredible-Machine"

\end_inset

, is an “edutainment” puzzle game that puts the player in the position of
 having to solve contraptions similar to a Rube Goldberg machine.
 TIM challenged players to think outside the box to solve abstract problems
 and became quite popular, however it was critiqued by teachers for having
 a game format that was difficult to adapt to a curriculum.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/TIM.jpg
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The Incredible Machine
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Incredible-Machine"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
America’s Army
\end_layout

\begin_layout Standard
America’s Army, Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:America's-Army"

\end_inset

, is a first person tactical shooter created to provide a virtual experience
 of being a soldier.
 The game was published by the US Army in 2002, as a free download.
 The game has since seen numerous updates and several re-releases on new
 engines with the latest in 2013.
 Despite being what could be called a PR stunt, the game was well received
 with great review scores and several awards.
 Much of this reception is credited to the realistic portrayal of soldiering,
 including basic training and not just the gamified fighting that most similar
 games portray.
 It also includes an optional medical training, which has been credited
 to saving lives in at least two situations, where players used the knowledge
 from the game in actual emergencies.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/AA.jpg
	scale 49

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
America's Army
\begin_inset CommandInset label
LatexCommand label
name "fig:America's-Army"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
X-Plane
\end_layout

\begin_layout Standard
X-Plane, Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:X-Plane"

\end_inset

, is a “Simulation” title, more specifically a flight simulator that aims
 to deliver a realistic flying experience.
 It is FAA approved and is used for pilot training[ref], advertising such
 features as Artificially Controlled Air Traffic Controller, an extensive
 amount of airports from real life, a wide range of aircrafts available,
 training on autopilot and other things.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/XPlane.jpg
	lyxscale 25
	scale 18

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
X-Plane
\begin_inset CommandInset label
LatexCommand label
name "fig:X-Plane"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Wii Fit
\end_layout

\begin_layout Standard
Wii Fit, Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Wii-Fit"

\end_inset

, is a “Games for Health” title for the Nintendo Wii that by an extra peripheral
 allowed the players to do exercises and measure BMI amongst other things
 in their living room.
 The effectiveness of the Wii Fit has been debated, as the intensity in
 the exercises is lackluster and will most likely not yield much benefits
 unless the player was in poor shape to begin with.
 It has however been reported with successful use in the field of physiotherapy
 rehabilitation.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/WiiFit.jpg
	scale 54

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Wii Fit
\begin_inset CommandInset label
LatexCommand label
name "fig:Wii-Fit"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Summary
\end_layout

\begin_layout Standard
What we can gather from this is that the most successful serious games,
 are indeed still games.
 All of the most memorable of these provide an experience that, in terms
 of entertainment, rivals games that are purely aimed for this purpose.
 Most serious games end up with so much focus being directed at the serious
 part that there is no room left for any fun.
 As shown by the trends in the early 90’s, the odds that anyone will prefer
 a mainly educational game over one aimed at entertainment is fairly low.
 Considering this, we believe that instead of trying to compete with other
 games, we should compete with the traditional blackboard teaching methods
 and introduce an alternative to this instead.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Designing an Engaging Game
\begin_inset CommandInset label
LatexCommand label
name "sec:Designing-an-Engaging"

\end_inset


\end_layout

\begin_layout Standard
In terms of technology game development have changed drastically over the
 years, and will continue to do so.
 However, when it comes to the core aspects of game development, there has
 not been any real change.
 The reason people still play games is because they still find them fun,
 and the reason for this has not changed on a fundamental level.
 This means that the article by Malone 
\begin_inset CommandInset citation
LatexCommand cite
key "Malone"

\end_inset

 about what makes games intrinsically motivating, as well as the study by
 Sweetser and Wyeth 
\begin_inset CommandInset citation
LatexCommand cite
key "GameFlow"

\end_inset

 on flow elements in games, based upon Mihaly Csikszentmihalyis studies
 on flow, are still relevant for this project.
 All of these studies have researched the psychology behind things we find
 interesting, and isolated it to apply to game elements such as the user
 interface and sounds.
 Although Malone lists five things that are important for a game to be engaging,
 and Sweetser and Wyeth identifies eight different flow elements, they can
 be broken down to three main categories.
 These categories are challenge, fantasy, and curiosity.
\end_layout

\begin_layout Subsection
Intrinsic and Extrinsic Motivation
\end_layout

\begin_layout Standard
Intrinsic motivation comes from a sense of accomplishment and enjoyment,
 something you do just because you enjoy doing it.
 Whereas extrinsic motivation involves some external factor motivating you
 to do something, either to gain a reward or avoid some negative consequence.
 Hobbies are mostly intrinsically motivated as this is something people
 do for their own enjoyment, while work and most day to day tasks such as
 cleaning are extrinsically motivated.
\end_layout

\begin_layout Standard
There is also a special phenomenon related to this called the overjustification
 effect.
 This occurs when you provide someone that is already intrinsically motivated
 for a task with an additional extrinsic motivation.
 The result of this is that the degree of intrinsic motivation diminishes
 because the activity now feels less fulfilling when the external reward
 is missing.
 Games are for most people mostly intrinsically motivated, the enjoyment
 comes from the feelings of accomplishment that often accompanies the effect
 of flow, or being in the zone.
 Achieving this is reliant on several factors within the three categories
 mentioned above.
\end_layout

\begin_layout Subsection
Challenge
\end_layout

\begin_layout Standard
Creating a suitable level of difficulty is possibly the hardest part about
 designing a game, and often also the most important part.
 Suitable in this context does not entail a single level of difficulty,
 but scaling it in a way that keeps it on a level that changes according
 to the player's own skill development.
 If a game is too easy the player will get bored and lose interest, while
 if it is too difficult frustration will occur and the player might give
 up.
 Most games today become more challenging as you progress, unlocking more
 complex mechanics or harder enemies, in addition to often giving a choice
 to select a preferred difficulty level before starting the game.
 Competitive multiplayer games handle this by matching players of similar
 experience and skill together to even the playing field, often by also
 giving players a transparent ranking system to track their own and other
 people's progress.
\end_layout

\begin_layout Standard
First of all, to achieve a challenge you must present a goal that needs
 to be reached.
 This goal then needs to be clearly defined, so that the player knows what
 to do, and there needs to be clear feedback on the progress towards said
 goal.
 A fact that is especially important in serious/educational games is that
 the goal itself is not to learn, but learning is a way to achieve the goal.
 The purpose of the game, and the goals in the game itself, are usually
 not the same.
 For instance in a driving simulator a good goal would be getting safely
 to a destination, not “learning to drive safely” which is the skill required
 to reach the goal.
\end_layout

\begin_layout Standard
To avoid players dismissing the game too soon, it should require little
 to no knowledge before starting the game, it should be possible to jump
 straight into the game and get started without reading the manual.
 In most games this is achieved by having one or more tutorial levels in
 the start of the game to familiarize the player with the basic mechanics,
 controls, and graphics interface.
 This makes the initial learning necessities an integrated part of the game,
 which avoids the need to look for external sources of information.
 Introduction of new game mechanics and other rule changes should be introduced
 gradually so the player is not overwhelmed at the beginning, while also
 making the game more challenging as it progresses.
 Doing this ensures that the challenge ramps up as the player’s skill increases.
\end_layout

\begin_layout Standard
Lastly, the game controls are a very important aspect.
 The player needs to feel that he is in control of his character and/or
 units, and be able to issue commands effectively.
 To attain a large enough level of control for the player it is important
 to consider all aspects of the game interface.
 Input devices need to be responsive and precise.
 The graphics interface, including sound, need to show feedback immediately
 when required as a response to commands from the player.
 If the interfaces are too clunky to use it will not matter how intriguing
 the story is, or how good the mechanics are, the player will stop playing
 the game because of undue frustration.
 It is also important that the player feels that he is discovering and planning
 strategies on his own, not just uncovering what the designers put in place.
 If this is done poorly it will feel more like pressing buttons to play
 a movie instead of a game.
\end_layout

\begin_layout Standard
All in all the challenge aspect has a huge impact in how a game is perceived
 by the player, and is a very important part of the design process.
 Most aspects of a game relates to challenge in one way or another, even
 if it is just displaying the current objective or playing a sound when
 a point is scored.
\end_layout

\begin_layout Subsection
Fantasy
\end_layout

\begin_layout Standard
Computer games in general involve a fantasy aspect.
 The different implementations however vary widely, including both extrinsic
 and intrinsic fantasies.
 Common for all is that the fantasies are used to invoke curiosity and interest
 in playing the game.
 Fantasies that are very emotionally involving including topics like war,
 competition and destruction are more popular than the ones that invoke
 very little emotional involvement.
\end_layout

\begin_layout Standard
Fantasies are categorized as either extrinsic or intrinsic, shown in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Extrinsic-and-Intrinsic"

\end_inset

.
 Extrinsic fantasies depend on the correct usage of a skill, such as right
 or wrong answers, or the time it takes to answer.
 In these types of games the fantasy itself has no impact on the skill usage,
 the actual problem could easily be presented in a myriad of other ways,
 one example of a game with an extrinsic fantasy is hangman.
 For intrinsic fantasies the usage of the skill also depends on what happens
 in the fantasy, the required responses change as input is given to the
 game.
 In a racing game for instance, the current speed would impact the amount
 of time needed to take a turn.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename figures/ExtrinsicIntrinsicFantasy.png
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Extrinsic and Intrinsic Fantasy
\begin_inset CommandInset label
LatexCommand label
name "fig:Extrinsic-and-Intrinsic"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
These fantasies have a wide range of realism, often varied to suit the skills
 needed to complete the given goals.
 For instance an arcade focused racing game could quickly become boring
 if the player had to constantly keep track of fuel, oil pressure, and other
 small tasks, however these things could be very helpful if the game was
 intended to train professional drivers instead.
 Depending on whether the fantasy is extrinsic or intrinsic, and the amount
 of realism involved, the skills acquired from playing the game could in
 some cases be applicable to a real world counterpart of the fantasy, like
 in a driving simulator.
\end_layout

\begin_layout Subsection
\noindent
Curiosity
\end_layout

\begin_layout Standard
Invoking the player's curiosity is a crucial part in maintaining their interest
 in the game.
 This is also highly dependant on the challenge level.
 The complexity of the required by the game has to be balanced towards the
 player's current level of knowledge.
 Optimally, the player should have enough knowledge about the environment
 that he can predict what might happen, but also still be surprised by being
 wrong.
 Although challenge and curiosity are closely related, it is more beneficial
 from an analytical standpoint to look at them individually.
 Curiosity is also divided into two categories, sensory and cognitive.
\end_layout

\begin_layout Quote
“Challenge could be explained as curiosity about one’s own ability.
 Curiosity could be explained as a challenge to one’s understanding” - Thomas
 W.
 Malone
\end_layout

\begin_layout Standard
Sensory curiosity is the response to changes in the environment, such as
 light, sound, or movement.
 In his book “Four Arguments for the Elimination of Television”, Jerry Mander
 
\begin_inset CommandInset citation
LatexCommand cite
key "ElimTellie"

\end_inset

 makes an interesting observation regarding how this is manipulated in different
 types of television programs.
 He notes the number of “technical events” such as camera angle changes,
 zoom, and similar changes to the picture per minute.
 The average number of events for commercials were 20 to 30, while regular
 programs has about 8 to 10, with public television on 2 to 3.
 This shows that adding more events can be a simple way to boost interest
 by engaging the sensory curiosity.
\end_layout

\begin_layout Standard
Cognitive curiosity is based upon wanting to expand on currently existing
 knowledge.
 The degree of curiosity is largely related to the knowledge one already
 has about a subject.
 With no knowledge at all, the curiosity level is normally low to nonexistent,
 while having a good grasp on a subject more often will lead to wanting
 to learn even more.
 You are much more likely to want to finish a story that is ninety percent
 complete compared to ten percent complete.
 Cognitive curiosity is also triggered by getting information that at first
 conflicts with what is currently known.
 For instance knowing that plants survive by photosynthesis, then hearing
 about plants that survive in complete darkness.
\end_layout

\begin_layout Standard
Utilizing this information in games can be done by graphical or sound effect
 to arouse sensory curiosity, and by handling the information flow carefully
 to match the player's current knowledge.
 The feedback and responses to actions should be clear and concise, with
 the accompanying information being constructive to aid in the educational
 aspect where applicable.
\end_layout

\begin_layout Subsection
Summary
\end_layout

\begin_layout Standard
The main points we can take with us from this is that we need a way to scale
 the difficulty, as well as having a user interface with clear and concise
 feedback.
 We also need to make sure the controls feel intuitive, since this greatly
 influences the player experience.
 On top of this we should have a small tutorial that explains how the game
 is played, to eliminate the need for any instructions before starting.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Related Work
\begin_inset CommandInset label
LatexCommand label
name "sec:Related-Work"

\end_inset


\end_layout

\begin_layout Standard
Here we will show the work of two earlier master thesis projects that are
 also using the Kinect sensor.
 Both of these projects created game prototypes using the Kinect v1 sensor,
 one with the OpenNI framework, and one using the Microsoft Kinect framework.
\end_layout

\begin_layout Subsection
Evaluation of an Interactive Campaign using Motion Sensing Technology
\end_layout

\begin_layout Standard
This project, from 2012 by Mari Hansen Asplem and Mia Aasbakken 
\begin_inset CommandInset citation
LatexCommand cite
key "EvaluationInteractive"

\end_inset

, created a motion controlled game to be used in public spaces.
 The goal of the project is to map out people's reactions to this type of
 installations and judge if there is a use for them.
 In order to figure this out, they created a game where the player use their
 own silhouette to gather balls in a basket.
 Since the focus of this project was more on people’s behaviour and reactions
 than on the pedagogical aspect, their results give a great deal of insight
 into how to best approach creating a game aimed at a public setting.
\end_layout

\begin_layout Subsection
Learning Recycling From Playing a Kinect Game
\begin_inset CommandInset label
LatexCommand label
name "sub:Learning-Recycling-From"

\end_inset


\end_layout

\begin_layout Standard
José de Jesús Luis González Ibáñez performed a study in 2013, creating a
 motion controlled educational game with the goal of teaching recycling
 
\begin_inset CommandInset citation
LatexCommand cite
key "KinectRecycle"

\end_inset

.
 This project had a focus on how to best create a game that is fun, while
 still keeping the learning aspect.
 There is a multiplayer aspect in this game as well, with both cooperative
 and competitive moduses, although due to the older version of kinect it
 is limited to two players.
 The results show an interesting trend in that the multiplayer mode is largely
 preferred over single player, by over 90
\begin_inset Formula $\%$
\end_inset

.
\end_layout

\begin_layout Subsection
Summary
\end_layout

\begin_layout Standard
From these two projects we can gather that there are many unexplored potential
 uses for the combination of motion tracking and game technology.
 Combining the findings of Asplem and Aasbakken, as well as the more game
 related project of Ibáñez, gives a good foundation of results.
\end_layout

\end_body
\end_document
